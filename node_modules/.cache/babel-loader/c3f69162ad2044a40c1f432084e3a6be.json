{"ast":null,"code":"var _jsxFileName = \"/Users/stevenslyker/Desktop/DUCodingClass/HW13-React-R1/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends\n    };\n\n    this.removeFriend = id => {\n      // Filter this.state.friends for friends with an id not equal to the id being removed\n      const friends = this.state.friends.shuffle(friend => friend.id !== id); // Set this.state.friends equal to the new friends array\n\n      this.setState({\n        friends\n      });\n    };\n  }\n\n  // removeFriend(friends) {\n  //   let i = friends.length - 1;\n  //   for (; i > 0; i--) {\n  //     const j = Math.floor(Math.random() * (i + 1));\n  //     const temp = friends[i];\n  //     friends[i] = friends[j];\n  //     friends[j] = temp;\n  //   }\n  //   return friends;\n  // }\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      highscore: this.state.highscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Clicky Game\"), this.state.cards.map(card => React.createElement(Card, {\n      clickCount: this.clickCount,\n      id: card.id,\n      key: card.id,\n      image: card.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stevenslyker/Desktop/DUCodingClass/HW13-React-R1/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","App","state","removeFriend","id","shuffle","friend","setState","render","score","highscore","cards","map","card","clickCount","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BM,KAF0B,GAElB;AACNF,MAAAA;AADM,KAFkB;;AAAA,SAM1BG,YAN0B,GAMXC,EAAE,IAAI;AACnB;AACA,YAAMJ,OAAO,GAAG,KAAKE,KAAL,CAAWF,OAAX,CAAmBK,OAAnB,CAA2BC,MAAM,IAAIA,MAAM,CAACF,EAAP,KAAcA,EAAnD,CAAhB,CAFmB,CAGnB;;AACA,WAAKG,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACD,KAXyB;AAAA;;AAa1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAQ,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,KAA1B;AAAiC,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWQ,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,IACxB,oBAAC,IAAD;AACE,MAAA,UAAU,EAAE,KAAKC,UADnB;AAEE,MAAA,EAAE,EAAED,IAAI,CAACT,EAFX;AAGE,MAAA,GAAG,EAAES,IAAI,CAACT,EAHZ;AAIE,MAAA,KAAK,EAAES,IAAI,CAACE,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADF;AAaD;;AAvCyB;;AA0C5B,eAAed,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const friends = this.state.friends.shuffle(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends });\n  };\n\n  // removeFriend(friends) {\n  //   let i = friends.length - 1;\n  //   for (; i > 0; i--) {\n  //     const j = Math.floor(Math.random() * (i + 1));\n  //     const temp = friends[i];\n  //     friends[i] = friends[j];\n  //     friends[j] = temp;\n  //   }\n  //   return friends;\n  // }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n        {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}