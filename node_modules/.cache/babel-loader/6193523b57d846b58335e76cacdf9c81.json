{"ast":null,"code":"var _jsxFileName = \"/Users/stevenslyker/Desktop/DUCodingClass/HW13-React-R1/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends\n    };\n  }\n\n  // removeFriend = friends => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   // const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   const friends = this.state.friends.Math.floor(Math.random());\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n  removeFriend(friends) {\n    let i = friends.length - 1;\n\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n    }\n\n    return friends;\n  } // Map over this.state.friends and render a FriendCard component for each friend object\n\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Friends List\"), this.state.friends.map(friend => React.createElement(FriendCard, {\n      removeFriend: this.removeFriend,\n      id: friend.id,\n      key: friend.id,\n      image: friend.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stevenslyker/Desktop/DUCodingClass/HW13-React-R1/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","App","state","removeFriend","i","length","j","Math","floor","random","temp","render","map","friend","id","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BM,KAF0B,GAElB;AACNF,MAAAA;AADM,KAFkB;AAAA;;AAM1B;AACA;AACA;AACA;AACA;AACA;AACA;AAEAG,EAAAA,YAAY,CAACH,OAAD,EAAU;AACpB,QAAII,CAAC,GAAGJ,OAAO,CAACK,MAAR,GAAiB,CAAzB;;AACA,WAAOD,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACjB,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,YAAMM,IAAI,GAAGV,OAAO,CAACI,CAAD,CAApB;AACAJ,MAAAA,OAAO,CAACI,CAAD,CAAP,GAAaJ,OAAO,CAACM,CAAD,CAApB;AACAN,MAAAA,OAAO,CAACM,CAAD,CAAP,GAAaI,IAAb;AACD;;AACD,WAAOV,OAAP;AACD,GAvByB,CAyB1B;;;AACAW,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEG,KAAKT,KAAL,CAAWF,OAAX,CAAmBY,GAAnB,CAAuBC,MAAM,IAC5B,oBAAC,UAAD;AACE,MAAA,YAAY,EAAE,KAAKV,YADrB;AAEE,MAAA,EAAE,EAAEU,MAAM,CAACC,EAFb;AAGE,MAAA,GAAG,EAAED,MAAM,CAACC,EAHd;AAIE,MAAA,KAAK,EAAED,MAAM,CAACE,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADF;AAaD;;AAxCyB;;AA2C5B,eAAed,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  // removeFriend = friends => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   // const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   const friends = this.state.friends.Math.floor(Math.random());\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n  removeFriend(friends) {\n    let i = friends.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n    }\n    return friends;\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Friends List</Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}